// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using cashboard3._5.Data;

#nullable disable

namespace cashboard3._5.Data.Migrations
{
    [DbContext(typeof(DataDbContext))]
    partial class DataDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("cashboard3._5.Data.Entities.CryptoWatchlistEntity", b =>
                {
                    b.Property<int>("CryptoWatchlistEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CryptoWatchlistEntityId"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateEntered")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvalidationOfThesis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<float?>("TargetEntry")
                        .HasColumnType("real");

                    b.Property<float?>("TargetExit")
                        .HasColumnType("real");

                    b.Property<string>("Thesis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CryptoWatchlistEntityId");

                    b.ToTable("CryptoWatchlist");
                });

            modelBuilder.Entity("cashboard3._5.Data.Entities.PNLTableEntity", b =>
                {
                    b.Property<int>("PNLTableEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PNLTableEntityId"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("ProfitabilityPercent")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("float");

                    b.Property<double?>("StockPnlPercent")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("float");

                    b.Property<double?>("TotalPnlPercent")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("float");

                    b.Property<double?>("WinRateCrypto")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("float");

                    b.Property<double?>("WinRateStocks")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("float");

                    b.Property<double?>("WinRateTotal")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("float");

                    b.HasKey("PNLTableEntityId");

                    b.ToTable("PnlTable");
                });

            modelBuilder.Entity("cashboard3._5.Data.Entities.StockWatchlistEntity", b =>
                {
                    b.Property<int>("StockWatchlistEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockWatchlistEntityId"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("DateEntered")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvalidationOfThesis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<float?>("TargetEntry")
                        .HasColumnType("real");

                    b.Property<float?>("TargetExit")
                        .HasColumnType("real");

                    b.Property<string>("Thesis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StockWatchlistEntityId");

                    b.ToTable("StockWatchlist");
                });

            modelBuilder.Entity("cashboard3._5.Data.Entities.TradeEntity", b =>
                {
                    b.Property<int>("TradeEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TradeEntityId"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ClosedReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConfidenceLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateEntered")
                        .HasColumnType("datetime2");

                    b.Property<string>("DateTimeOpened")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectionOpened")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Improvements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCrypto")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<string>("Observations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PriceAtEntry")
                        .HasColumnType("float");

                    b.Property<float?>("PriceAtExit")
                        .HasColumnType("real");

                    b.Property<double?>("ProfitPercent")
                        .HasColumnType("float");

                    b.Property<bool?>("Profitabile")
                        .HasColumnType("bit");

                    b.Property<float?>("SizeInUsd")
                        .HasColumnType("real");

                    b.Property<float?>("StopLoss")
                        .HasColumnType("real");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<double?>("Target")
                        .HasColumnType("float");

                    b.Property<bool?>("TargetReached")
                        .HasColumnType("bit");

                    b.Property<int?>("TradeRating")
                        .HasColumnType("int");

                    b.Property<string>("TradeReason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TradeEntityId");

                    b.ToTable("Trades");

                    b.HasData(
                        new
                        {
                            TradeEntityId = 1,
                            AssetName = "Bitcoin",
                            ClosedReason = "",
                            ConfidenceLevel = 9,
                            DateEntered = new DateTime(2024, 3, 7, 1, 35, 6, 654, DateTimeKind.Utc).AddTicks(2017),
                            DateTimeOpened = "03/01/2024",
                            DirectionOpened = "Long",
                            IsCrypto = true,
                            IsOpen = true,
                            PriceAtEntry = 65000.449999999997,
                            SizeInUsd = 1000f,
                            StopLoss = 61990f,
                            Symbol = "BTC",
                            Target = 70000.0,
                            TradeReason = "Strong uptrend based on many factors"
                        },
                        new
                        {
                            TradeEntityId = 2,
                            AssetName = "Ethereum",
                            ClosedReason = "market looked topped",
                            ConfidenceLevel = 9,
                            DateEntered = new DateTime(2024, 3, 7, 1, 35, 6, 654, DateTimeKind.Utc).AddTicks(2025),
                            DateTimeOpened = "03/02/2024",
                            DirectionOpened = "Long",
                            Improvements = "None",
                            IsCrypto = true,
                            IsOpen = false,
                            Observations = "None",
                            PriceAtEntry = 3510.4499999999998,
                            PriceAtExit = 3900f,
                            ProfitPercent = 10.0,
                            Profitabile = true,
                            SizeInUsd = 1000f,
                            StopLoss = 3400f,
                            Symbol = "ETH",
                            Target = 4000.0,
                            TargetReached = false,
                            TradeRating = 7,
                            TradeReason = "Very Strong uptrend based on many factors, ETF soon"
                        },
                        new
                        {
                            TradeEntityId = 3,
                            AssetName = "Bitcoin",
                            ClosedReason = "",
                            ConfidenceLevel = 9,
                            DateEntered = new DateTime(2024, 3, 7, 1, 35, 6, 654, DateTimeKind.Utc).AddTicks(2030),
                            DateTimeOpened = "03/01/2024",
                            DirectionOpened = "Long",
                            IsCrypto = true,
                            IsOpen = true,
                            PriceAtEntry = 65000.449999999997,
                            SizeInUsd = 1000f,
                            StopLoss = 61990f,
                            Symbol = "BTC",
                            Target = 70000.0,
                            TradeReason = "Strong uptrend based on many factors"
                        },
                        new
                        {
                            TradeEntityId = 4,
                            AssetName = "Bitcoin",
                            ClosedReason = "market looked topped",
                            ConfidenceLevel = 9,
                            DateEntered = new DateTime(2024, 3, 7, 1, 35, 6, 654, DateTimeKind.Utc).AddTicks(2032),
                            DateTimeOpened = "03/01/2024",
                            DirectionOpened = "Long",
                            Improvements = "None",
                            IsCrypto = true,
                            IsOpen = true,
                            Observations = "None",
                            PriceAtEntry = 65000.449999999997,
                            PriceAtExit = 3900f,
                            ProfitPercent = 10.0,
                            Profitabile = true,
                            SizeInUsd = 1000f,
                            StopLoss = 61990f,
                            Symbol = "BTC",
                            Target = 70000.0,
                            TargetReached = false,
                            TradeRating = 7,
                            TradeReason = "Strong uptrend based on many factors"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
